The title of each section follows the tutorial. 

Index:
    1. Python Syntax
    2. Python Comments
    3. Python Variables
    4. Python Data Types
    5. Python Numbers
    6. Python Casting
    7. Python Strings
    8. Python Booleans
    9. Python Operators


---------------------------------------

1. Python Syntax

---------------------------------------

    py <file.py>
// Execute .py file

    print()
// stdout

    if <condition>:
        <someCode>
// if statement

---------------------------------------

2. Python Comments

---------------------------------------

    # <one-line comment>
// One line comment

    """
    <Multiple-lines comment>
    """
// Multiple lines comment

---------------------------------------

3. Python Variables

---------------------------------------

    x = "John"
    # is the same as
    x = 'John'
// " " is the same as ' ' in python

    x, y, z = "Orange", "Banana", "Cherry"
    x = y = z = "Orange"
// assign values to multiple variables

    print("someText" + x)
// Concatenation, but concatenating number and string is not supported.

    x = 10
    "someText" + str(x)
// To concatenate between number and string, use str() method first 

    x = "awesome"

    def func():
        print(x)
    func()
// Global Variables - variables created outside of a function, in the example, x is a global variable

    x = "awesome"

    def func():
        x = "nah"
        print(x)
    func()
// Local variable - variables created inside a function, same concept as in java. In the example, the x variable is within the scope of the func() method, so it is printed instead.

    def createGlobalVar():
        global globalVar 
        globalVar = "I am global variable created within a func"
    createGlobalVar()
    print(globalVar)
// Creating a global variable within a function using keyword - "global"

---------------------------------------

4. Python Data Types

---------------------------------------

    Text Type: str

    Numeric Types: int, float, complex

    Sequence Types: list, tuple, range

    Mapping Type: dict

    Set Types: set, frozenset

    Boolean Type: bool

    Binary Types: bytes, bytearray, memoryview

    type(x)
// get the data type of the variable, i.e., show the class it belongs to

    x = "abc"
    x = str("abc") # explicitly
// string data type

    x = 10
    x = int(10) # explicitly
// int data type

    x = 10.0
    x = float(10.0) # explicitly
// float data type

    x = 1j
    x = complex(1j) # explicitly
// complext data type

    x = ["apple", "banana", "cherry"]
    x = list(("apple", "banan", "cherry")) # explicitly
// list data type (similar to array, but contains different types of elements).

    x = ("apple", "banana", "cherry")
    x = tuple(("apple", "banana", "cherry"))
// tuple data type

    x = range(6)
// range, a sequence of number

    x = {"name": "John", "age": 100}
// dict data type

    x = {"apple", "banana", "cherry"}
// set data type

    x = frozenset({"apple", "banana", "cherry"})
// frozenset, (immutable set)

    x = bool(True)
    x = True
// boolean data type (case sensitive)

    x = b<String>
    x = b"Hello"
    x = bytes("Hello")
    x = bytes("Hello", encoding="UTF-8") # better option
// Convert string to bytes literals (immutable)

    x = bytearray(5)
// bytearray

    x = memoryview(bytes(5))
// memoryview. "memoryview objects are great when you need subsets of binary data that only need to support indexing." (StackOverflow: [https://stackoverflow.com/questions/18655648/what-exactly-is-the-point-of-memoryview-in-python])


---------------------------------------

5. Python Numbers

---------------------------------------

There are three numeric types in py:
    - int 
        (of unlimited length)
    - float 
        ('e' can be used to indicate the power of 10 as a scientific numbers)
        e.g., 
        x = 35e3 (which is 35 * 10^3)
        x = 12E4 (wich is 12 * 10^4)
    - complex
        ("j" is used to indicate the imaginary part of the complex number)

Type conversion, can be achieved using int(), float(), complex(). However COMPLEX NUMBER cannot! be converted to other numbers.

    x = 1
    y = float(x)
// convert int to float

    x = 2.8
    y = int(x)
// convert float to int

    x = 1
    y = complext(x)
// convert int to complext

---------------------------------------

6. Python Casting

---------------------------------------

There are many cases where there is a need to specify a type of a variable, this is done using casting or constructor, including the primitive types.
    e.g.,
        x = int(1) # 1
        x = int("2.8") # 2

        y = float(1) # 1.0
        y = float("2.2") # 2.2
        y = float(3.5) # 3.5

        z = str(2) # "2"
        z = str("2") # "2"
        z = str(3.0) # "3.0"

---------------------------------------

7. Python Strings

---------------------------------------        

String literals are surrounded by ' ' or " ".

    'abc' is the same as "abc"

A multiline string is assigned as follows:

    a = """This is a multiple line Strings,
    very many words, etc etc etc etc balbalbala
    balbalbala"""

In python, strings are arrays of bytes representing the unicode characters. However, python doesn't have character data type, a single character is a string with a length of 1.

To get one character from a string:

    a = "Hello world"
    c = a[0] # index starts from 0

Slicing (i.e., substring), the ending index is excluded

    a = "Hello world"
    b = a[0:4] # 4 exclusive

Slicing using negative indices, which starts from the end with the index of -1, and the ending index is excluded

    a = "Hello world"
    b = a[-11:-6] # Hello
    b = a[-1] #d   

To check the length of a string:

    a = "Hello world"
    stringLength = len(a)    

A few built-in methods for handling strings (all of them do not change original string, they return new values):

    - strip() method that removes whitespace from the beginning or the end
        a = "   Hello world   "
        a_without_space = a.strip() # "Hello world"
    
    - lower() that returns the string in lowercase
        a = "AAA"
        print(a.lower()) # aaa    

    - upper() that returns the string in uppercase
        a = "aaa"
        print(a.upper()) # AAA

    - replace() that replaces the specified string(of any length) exactly a number of times
        a = "abcaaa"
        print(a.replace("a", "A", 1)) # "Abcaaa"

    - split() that replit the string into a list of substrings
        a = "aaa,bbbb"
        print(a.split(",")) #['aaa', 'bbbb']

    - keywords "in" or "not in" are used to check whether a string contains certain sequenc of characters
        a = "aaa,bbb"
        print("aaa" in a)
        print("c" in a)
        print("Does Not Have \"c\"?", "c" not in a)

    - Concatenation
        a = "Hello"
        b = "World"
        print(a + b)

    - format() that combines different variables (especially those cannot be concatenated). It takes the passed arguments, formats them, and places them in the string where the placeholders {} are:
        age = 24
        habit = "programming"
        name = "Curtis is {} and I love {} "
        print(name.format(age, habit))

---------------------------------------

8. Python Booleans

---------------------------------------
    
Booleans in Py hold two values: True or False (case-sensitive)     

    bool(10) # true
    bool([value])
// evaluate the value, Almost any value is evaluated to True if it has some sort of content. Any string is True, except empty strings. Any number is True, except 0. Any list, tuple, set, and dictionary are True, except empty ones. 

In the following conditions this method returns false:
    - None
    - False
    - Zero of any numeric type
    - Empty sequence of char and string
    - Empty array
    - Empty mapping {}
    - Objects of Classes which has __bool__() or __len()__ method that returns 0 or false

    isinstance([object], [data type/class])
// return True or False depending on whether an object is a certain data type

---------------------------------------

9. Python Operators

---------------------------------------

Operators can be divided into:
    -> Arithmetic operators
    -> Assignment operators
    -> Comparison operators
    -> Logical operators
    -> Identity operators
    -> Membership operators
    -> Bitwise operators
 
    9.1 Arithmetic Operators:
        + - * / % 
        ** # Exponentiation  
        // # Floor division

        More about Exponentiation 
            x ** y # x to the power of y

        More about Floor division
            In case of perfect division, / and // returns the same result, however, for the imperfect   divisions, // returns the lower integer to the value, e.g.,

            10/3 # 3.33333
            10//3 # 3.0

            -10/3 # -3.33333
            -10//3 # -4.0

    9.2 Assignment Operators:    
        -> =
        -> += 
        -> -= 
        -> *=
        -> /=
        -> %=
        -> //=
        -> **=
        -> &= 
    # set intersection,  x &= y, x = x & y
        -> |= 
    # set union,  x |= y, x = x | y
        -> ^= 
    # diff, x ^= y, x = x ^ y 
        -> >>= 
    # bit shift, x >>= y, x = x >> y
        -> <<= 
    # bit shift, x <<= y, x = x << y

        More on &=, != and ^= operator:
            It is called the  __iand__ operator, 
                e.g., x &= y is same as x = x & y 
                
            if they are set:
                x = {1,2,3}
                y = {2,3,4}

                x &= y # x becomes {2,3} set intersection
                b |= y  # b becomes {1,2,3,4} set union
                b ^= y  # b becomes {1,4} set difference     

        More on >>= and <<= operators:
            They are shift operators that it move all bits to left y bits, filled with 0 at the left or right.

            x = 12 # "0000 1100"
            x <<= 2 # x becomes 48, which is "0011 0000"

            x = 48 # "0011 0000"
            x >>= 2 # x becomes 12, which is "0000 1100"
    9.3 Comparison Operators:
        -> ==
        -> !=
        -> >
        -> <
        -> >=
        -> <=

    9.4 Logical Operators:
            -> and 
        # x < 5 and x < 10
            -> or 
        # x< 5 or x < 4
            -> not 
        # not(a > 0)

    9.5 Identity Operators:
        Identity operators are used to compare objects.
            -> is
        # Returns true if both variables are the same object, this way is much consistent to compare objects in comparison to objA == objB, as this compares identity, while == compares values
            -> is not
        # Returns true if both variables are not the same object

    9.6 Membership Operators:
        in
        not in

    9.7 Bitwise Operators:
        Bitwise operators are used to compare (binary) numbers, for each bit:
        -> & # Sets each bit to 1 if both bits are 1
        -> | # Sets each bit to 1 if one of two bits is 1  
        -> ^ # Sets each bit to 1 if only one of two bits is 1
        -> ~ # Inverts all the bits
        -> << # Shift left by pushing zeros in from the right and let the leftmost bits fall off
        -> >> # Shift right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off
    


         
        
                 