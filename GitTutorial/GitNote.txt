Index:
    1. Basic Git Commands
    2. Git Tagging
    3. Git Environment Setup
    4. Git Patch
    5. .gitignore
    6. Branching
    7. Git Handling Conflicts
    8. Git Fix Mistakes

---------------------------------------

1. Basic Git Commands

---------------------------------------

    git init
//initialise local git repository (this should be typed in the folder.)

    git add<file>   
//add File(s) to index

    git add .       
//add all

    git status      
//check status of working tree

    git commit
    git commit -m'<message>'
    git commit -m'<mess1>' -m'<mess2>'  
// commit changes in index

    git push    
    git push <repoName> <branchName>
// push to the current branch on the local repo or a specific branch on a remote repo

    git fetch
// fetch the updates of this branch from the remote repo, and see what is changed in comparison to the local repo

    git pull    
// pull latest from remote repo

    git clone<url>
// clone repo into a new dir

    git log
// show commit logs

    git show
    git show <commitSHA1>
// show commit details, e.g., what is added and removed

    git diff HEAD
    git diff --staged
    git diff <commitSHA1>
// show the difference between the staged files and the previous commits

    git commit --amend
// amend the last commit, including the commited files and commit messages

    git stash 
// stash the current changes to a temporary spaces, so that you can commit it later on. To stach the changes, the changes do not need to be added (or staged).

	git stash show <stashName>
	git stash show -p <stashName>
// show the stash details and diff, -p options allows showing details of the stashed changes.

    git stash list
// list the stash

    git stash pop
// pop the changes that is previously stashed

    git stash drop <stashName>
// drop the stash, e.g., "git stash drop stash@{0}"

    git mv <source> <destination>
// move or rename a file. In case of moving a file, and if the destination is a folder, the destination path it should be like this: "folder/" with a forward slash.

    git rm <file>
// remove file from the local repo

---------------------------------------

2. Git Tagging

---------------------------------------

    git tag -a <Annotated Tags> -m <message> HEAD
    git tag -a <Annotated Tags> -m <message> <commitSHA1>    
// tag current HEAD or a speicfic commit

    git push <remote> tag <tagName>
// to publish a tag to a remote

    git show <tagName>
// check a specific tag

    git tag -d <tagName>
// remove a tag from the repository

    git tag
// list all tags

---------------------------------------

3. Git Environment Setup

---------------------------------------

    git config --global user.name '<username>'  
    git config --global user.email '<email>'
// setup username and email

    git reset
	git restore --staged <file>
// unstage all the added files in the staging area, this command is equivalent to "git reset --mixed"

    git config --global branch.autosetuprebase always
// avoid merge commits for pulling from the remote.

    git config --global color.ui <true/false>
    git config --global color.status <auto>
    git config --global color.branch <auto>
    git config --global color.status.changed <color>
    git config --global color.status.untracked <color>
// Color highlighting

    git config --list
// show configuration of the local repository, and the commands above e.g., color highlighting can be modified following the result of the configuration.

    git config --global core.editor "<pathToEditorExecutable> -multiInst -notabbar -nosession -noPlugin"
// setup the default text editor for git commit message, by default it's vim.

---------------------------------------

4. Git Patch

---------------------------------------

Patch is a text file that records the changes of the files in a repository. It is like a file which contains the information of commits and changes. The patch file can be created and sent to someone, and the receiver can apply the patch to the working repository. The patch is of an file extension of .patch.

    git format-patch -<n> <commitSHA1>
// patch n commits from the specified commit (inclusive) onwards.

    git format-patch -<1> <commitSha1>
// patch only one commit and only the specified commit.

    git format-patch -1 HEAD
// patch the latest commit, i.e., the HEAD.

    git am <example.patch>
// modify the files in repository and create commit.

    git apply <example.patch>
// modify the files in repository but do not create commit.

---------------------------------------

5. .gitignore

---------------------------------------

<fileName>
# ignore this file

*.class
# ingore any files with an extension of ".class"

/<dirName>
# ignore folder with this name


---------------------------------------

6. Branching

---------------------------------------

The main branch is called "Master"

    git branch <branchName>
// create a new branch

    git branch
    git branch -a
    git branch -r
// check all branches, with option -a, it shows all local and remote branches, while with option -r, it shows only remote branches.

    git checkout <branchName>
// switch to a branch, where the files are changed based on the branch as well. 

    git checkout -b <newBranchName>
// create a new branch and immediately switch to it.

    git branch -D <branchName>
// delete a branch, but before deleting the branch, you should switch to another branch first.

    git branch -m <currentBranch> <newBranchName>
// rename a branch

    git branch --set-upstream-to <(optional) localBranch> <remoteRepo>/<branchName>
	git branch -u <(optional) localBranch> <remoteRepo>/<branchName>
    git push
// setup the upstream, pointing to a branch on the remote (i.e., remote/branch)

	git branch <newBranch>
	git push -u <remoteName> <newBranch>
// push the new branch that doesn't exist in the remote (i.e., create remoteName/newBranch)

    git remote
// list remote repo

    git remote add <remoteName> <url>
// add or connect to a remote repo. It is common that the remote is named "origin".

    git merge <branchName>
// merge another branch to current branch, so that the current branch will be fastforwading the changes. E.g., if we are at master, we want to merge branch "NewFeature" to master, i.e., fast forwarding master, we should call "git merge NewFeature" at master.

    git merge --abort
// abort the merge operation, and recover the repository back to the state before attempting to merge

    git merge --continue
// continue the merge, (e.g., when conflicts are solved)

    git rebase <branchName>
// apply all of a unique commits from branch b on top of branch a and replacing the branch b with this revised version. 

    The difference between merge and rebase is that rebase put the unique commits from a branch onto another branch. 
    
    The good things about merge is that it preserves history and order of commits, while the history may become pulluted by lots of merge commits. 

    The good things about rebase is that it keeps only the history of one branch (as the commits are put onto another branch), which keeps the history linear, facilitating debuging. There won't be many merge commits to be created in the history, but as the number of commits are removed, the context may be hidden. Especially, rebasing the public repositories can be dangerous when working as a team.

    git rebase --abort
// abort the conducted git rebase operation, recovering the repository back to status before attempting the rebase.

    git rebase --continue
// continue the rebase, (e.g., when conflicts are solved)

---------------------------------------

7. Git Handling Conflicts

---------------------------------------

Conflicts can be same functions or lines being modified, or same file being modified. This happends when one want to pull or merge commits. In such case, git doesn't not what to do with the conflicts.

when this happen, the conflicts need to be manually solved. The conflicts can e checked using git diff. After editing the files and solving the conflicts, the git merge -continue can be used to continue the merge operation, or simply add the edited files and commit a message similar to "merge conflicts resolved". If conflicts are found when conducting git pull operation, simply execute git pull again after the commits.

---------------------------------------

Git Fix Mistakes

---------------------------------------

1. In case of deleting or modifying the uncommited files, use git checkout command to obtain the orginal files. E.g.,

    git checkout <file>

2. In case of reverting committed changes, use git reset to move the HEAD pointer to a specific commit. E.g.,

        git reset --soft <commitSHA1>
        git reset --hard <commitSHA1>

    The option <--soft> tries to move the HEAD to a specific commit, but it keeps all the changes in the directory
    The option <--hard> tries to move the HEAD to a specific commit, but it removes all the changes.

    2.1 Instead of moving to specific commit, reset command can move the HEAD pointer back by n positions. E.g.,
    
        git reset --soft HEAD~n
        git reset --hard HEAD~n
    
        git reset --soft HEAD~
        git reset --soft HEAD~1
    
    HEAD~ is equivalent to HEAD~1. 

    2.2 As this command helps move backward, there are also commands moving forward to, such as, the last commit. To move forward to the last commit:
    
        git reset HEAD@{1}
        git reset HEAD@{n};
    
    This is like traversing the linked list, where the HEAD is just the pointer on the linked list, and the n is the index.





