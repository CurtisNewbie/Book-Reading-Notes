Index:
    1. Basic Git Commands
    2. Git Tagging
    3. Git Environment Setup
    4. .gitignore
    5. Branching
    6. Git Fix Mistakes

---------------------------------------

Basic Git Commands

---------------------------------------

    git init
//initialise local git repository (this should be typed in the folder.)

    git add<file>   
//add File(s) to index

    git add .       
//add all

    git status      
//check status of working tree

    git commit
    git commit -m'<message>'
    git commit -m'<mess1>' -m'<mess2>'  
// commit changes in index

    git push    
    git push <repoName> <branchName>
// push to the current branch on the local repo or a specific branch on a remote repo

    git fetch
// fetch the updates of this branch from the remote repo, and see what is changed in comparison to the local repo

    git pull    
// pull latest from remote repo

    git clone<url>
// clone repo into a new dir

    git log
// show commit logs

    git show
    git show <commitSHA1>
// show commit details, e.g., what is added and removed

    git diff HEAD
    git diff --staged
    git diff <commitSHA1>
// show the difference between the staged files and the previous commits

    git commit --amend
// amend the last commit, including the commited files and commit messages

    git stash 
// stash the current changes to a temporary spaces, so that you can commit it later on. To stach the changes, the changes must be added (or staged).

    git stash list
// list the stash

    git stash pop
// pop the changes that is previously stashed

    git mv <source> <destination>
// move or rename a file. In case of moving a file, and if the destination is a folder, the destination path it should be like this: "folder/" with a forward slash.

    git rm <file>
// remove file from the local repo

---------------------------------------

Git Tagging

---------------------------------------

    git tag -a <Annotated Tags> -m <message> HEAD
    git tag -a <Annotated Tags> -m <message> <commitSHA1>    
// tag current HEAD or a speicfic commit

    git push <remote> tag <tagName>
// to publish a tag to a remote

    git show <tagName>
// check a specific tag

    git tag -d <tagName>
// remove a tag from the repository

    git tag
// list all tags

---------------------------------------

Git Environment Setup

---------------------------------------

    git config --global user.name '<username>'  
    git config --global user.email '<email>'
// setup username and email

    git reset
// unstage all the added files in the staging area, this command is equivalent to "git reset --mixed"

    git config --global branch.autosetuprebase always
// avoid merge commits for pulling from the remote.

    git config --global color.ui <true/false>
    git config --global color.status <auto>
    git config --global color.branch <auto>
    git config --global color.status.changed <color>
    git config --global color.status.untracked <color>
// Color highlighting

    git config --list
// show configuration of the local repository, and the commands above e.g., color highlighting can be modified following the result of the configuration.

    git config --global core.editor "<pathToEditorExecutable> -multiInst -notabbar -nosession -noPlugin"
// setup the default text editor for git commit message, by default it's vim.

---------------------------------------

Git Patch

---------------------------------------

Patch is a text file that records the changes of the files in a repository. It is like a file which contains the information of commits and changes. The patch file can be created and sent to someone, and the receiver can apply the patch to the working repository. The patch is of an file extension of .patch.

    git format-patch -<n> <commitSHA1>
// patch n commits from the specified commit (inclusive) onwards.

    git format-patch -<1> <commitSha1>
// patch only one commit and only the specified commit.

    git format-patch -1 HEAD
// patch the latest commit, i.e., the HEAD.

    git am <example.patch>
// modify the files in repository and create commit.

    git apply <example.patch>
// modify the files in repository but do not create commit.





---------------------------------------

.gitignore

---------------------------------------

<fileName>
# ignore this file

*.class
# ingore any files with an extension of ".class"

/<dirName>
# ignore folder with this name


---------------------------------------

Branching

---------------------------------------

The main branch is called "Master"

    git branch <branchName>
// create a new branch

    git branch
    git branch -a
    git branch -r
// check all branches, with option -a, it shows all local and remote branches, while with option -r, it shows only remote branches.

    git checkout <branchName>
// switch to a branch, where the files are changed based on the branch as well. 

    git merge <branchName>
// merge current branch to another branch, so that the current branch will be fastforwading the changes.

    git remote
// list remote repo

    git remote add <remoteName> <url>
// add or connect to a remote repo

---------------------------------------

Git Fix Mistakes

---------------------------------------

1. In case of deleting or modifying the uncommited files, use git checkout command to obtain the orginal files. E.g.,

    git checkout <file>

2. In case of reverting committed changes, use git reset to move the HEAD pointer to a specific commit. E.g.,

        git reset --soft <commitSHA1>
        git reset --hard <commitSHA1>

    The option <--soft> tries to move the HEAD to a specific commit, but ikeeps   all     the changes in the directory
    The option <--hard> tries to move the HEAD to a specific commit, but iremoves all   the changes.

    2.1 Instead of moving to specific commit, reset command can move the HEAD pointer      back by n positions. E.g.,
    
        git reset --soft HEAD~n
        git reset --hard HEAD~n
    
        git reset --soft HEAD~
        git reset --soft HEAD~1
    
    HEAD~ is equivalent to HEAD~1. 

    2.2 As this command helps move backward, there are also commands moving forward to, such as, the last commit. To move forward to the last commit:
    
        git reset HEAD@{1}
        git reset HEAD@{n};
    
    This is like traversing the linked list, where the HEAD is just the pointer on the linked list, and the n is the index.





