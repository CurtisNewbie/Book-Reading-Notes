Chapter 30: Multithreading And Parallel Programming
    1. Basic Concepts: 
        1.1 Multithreading
            "Multithreading enables multiple tasks in a program to be executed concurrently." (p.1098)
    
        1.2. Thread
            "A thread is the flow of execution, from beginning to end, of a task." (p.1098)
    
        1.3 Time Sharing 
            In a single processor system, the multiple threads share CPU time, which is known as the Time Sharing. As one CPU is shared among multiple threads, the OS is responsible for scheduling and allocating resources to them. In some cases, multithreaded programs can even perform better than single-thread programs on single-core CPU system.

    2. Multithread in Java
        2.1 Runnable
            In Java, each task is an instance of the Runnable, or i.e., a Runnable object.
        
        2.2 Thread
            A thread is an object facilitating the execution of such a task.

    3. Creating Tasks and Threads
        3.1 Creating Task:
            "A task class must implement the Runnable interface." (p.1099) Runnable is a Functional Interface, which contains only the run method. This method is essentially telling the thread is going to run this task. 
            
        3.2 Creating Thread:
            "A task must be run from a thread." (p.1099) A thread is craeted as follows by telling the task that it should execute:

                // The Class of task is a Runnable
                Thread thread = new Thread(task);

        3.3 Start the Thread:
            
            // call the start method
            thread.start()

        3.4 To Stop the Thread:
            "Instead of using the stop() method, you should assign null to a Thread variable to indicate that has stopped." (p.1103)

    4. More about Thread
        Thread Class implements the Runnable interface. You can extends the Thread class to implements methods for controling the threads.

        Further, as the Thread class implements Runnable interface. It is possible to extend Thread class override the run() method, so that no Runnable object is created.

        It is worth to know that in Thread class (JDK), it internally calls the Runnable object's run(), where the target is the Runnable object that is passed to the Thread class when it being instantiated.

            Thread thread = new Thread(target);

            "
                @Override
                public void run() {
                    if (target != null) {
                        target.run();
                    }
                }
            "
        
        Note that: stop(), suspend(), and resume() are unsafe, thus depreciated.

        4.1 yield() method
            yield() method is a static method in Thread. It allows to temporarily release time for other threads. 
            
            One better explaination from GeeksforGees: 
                "yield() basically means that the thread is not doing anything particularly important and if any other threads or processes need to be run, they should run. Otherwise, the current thread will continue to run."

            More Importantly:
                "Whenever a thread calls java.lang.Thread.yield method, it gives hint to the thread scheduler that it is ready to pause its execution. Thread scheduler is free to ignore this hint.

                If any thread executes yield method , thread scheduler checks if there is any thread with same or high priority than this thread. If processor finds any thread with higher or same priority then it will move the current thread to Ready/Runnable state and give processor to other thread and if not â€“ current thread will keep executing."

            [https://www.geeksforgeeks.org/java-concurrency-yield-sleep-and-join-methods/]

        4.2 sleep() method
            This method is a static method. Similar to yield() method, sleep() method also temporarily pause the thread, except that yield() is not guarantee to pause the thread, and sleep() method pause the thread for a specified time in milisec.

            The InterruptedException by the sleep() method must be handled, it is thrown when the current Thread is interrupted.

        4.3 join() method
            join() method forces one thread to wait for another thread to finish.

        4.4 Thread Priority
            Every thread is assigned a priority, a thread inherits the prioirty of the thread that creates it. For example, main thread has a priority of Thread.NORM_PRIORITY, which is a constant.

            To manually assign a priority to the thread, use setPriority() method. To get the priority of a thread, use getPriority() method.

            Priority are numbers ranged from 1 to 10. Thread provides int constants for priority:
                - MIN_PRIORITY (valud of 1)
                - NORM_PRIORITY (value of 5)
                - MAX_PRIORITY (value of 10)
            It is recommended to use the constant for assigning priority values.

            4.4.1 Round-Robin Scheduling 
                Round-Robin Scheduling is the situation where all threads have the same priorities, thus each is assigned the same portion of processing time in a circular queue.
            
            4.4.2 Contention or Starvation
                JVM always runs the higher priority threads, thus the thread with lower priority runs only when there is no higher-priority threads. 

                A thread may never run if there is always a higher-priority thread running, the thread of same-priority never pause or yields. This situation is known as Contention or Starvation. To avoids, the thread with higher priority should periodically calls the sleep method or yield method so that the threads with lower-priority can run.

        4.5 Thread in Javafx
            When handling threads that are associated with the controls of GUI components or controls (e.g., Pane, Label etc), the Runnable object should be handled by the Javafx.Platform as follows:

                // pass the Runnable object to the Javafx.
                Platform.runLater(Runnable r); 

    5. Thread Pools
        Thread Pools are convenient for a large number of tasks. It can be very inefficient creating a new thread for each single task. To create a Thread Pool for a number of tasks to execute concurrently, Java provides the Executor interface and the ExecutorService interface for managing and controlling tasks in the Thread Pool.

            Executor<interface> <- ExecutorService

        5.1 To Create Thread Pool
            To create the Executor object, the static methods in the Executors (plural!) class are needed.
                
                e.g.,
                    Executors.newFixedThreadPool(int) : ExecutorService - which creates a Thread Pool that contains a fixed number of threads for executing tasks, and the threads in the Thread Pool can be reused once the current tasks are finished.
                    A thread in a thread pool is terminated when it has not been used for 60 seconds.

                    Executors.newCachedThreadPool() : ExecutorService - which creates a thread pool that creates new threads as needed, it may reuse previously created threads when they are available. A thread in a thread pool is terminated when it has not been used for 60 seconds. This method is efficient for many short tasks.

             
            For example:

                // create a thread pool with 3 threads running concurrently, if there is only one 
                // thread in the pool, tasks are executed sequentially
                ExecutorService pool = Executors.newFixedThreadPool(3);

                // add Runnable tasks to the pool, which are then executed by 3 threads
                pool.execute(Runnable object);
                pool.execute(Runnable object);
                pool.execute(Runnable object);

                // shutdown the pool, i.e., no more tasks added to the poole, while the tasks are 
                // still running until finished
                pool.shutdown();

    6 Thread Synchronisation

        6.1 Racing Condition
            Racing Condition is the condition where two or more tasks running concurrnetly which shares the common resources or one's behaviour being dependent on the other, that causing a conflict or undesirable outcome.

        6.2 Thread Safe
            A class is said to be thread-safe if an instance of it doesn't cause race condition in the context of Multithreading.

        6.3 The synchronized Keyword
            synchronized keyword can be used to force a method to only be accessed by one thread at a time. It implicitly uses lock mechanism. As it internally uses a lock that is bound to the object, the synchonisation is not limited to method only, but the object that these methods belong to. For the static methods, in JVM an "object" for each class exists, thus the lock is bound to the class.

            More on: <https://www.baeldung.com/java-synchronized>

                Syntax:

                    // instance method
                    public synchronized void update(int n){
                        ....
                    }            
                
                    // static method
                    public static synchronized void uddate(Record record, int n){
                        ...
                    }

                    // synchronized block
                    synchronized(object){
                        object.doSometthing();
                    }

        6.4 Synchronisation Using Locks
            Lock is a mechanism similar to that the threads are prevented to call the synchronizd methods or access the object's methods within the synchronized block, unless the Lock is released and one of them has acquired a 'Lock'. There can only be one lock acquired among the threads, thus it's a way to prevent racing condition. 

            The synchronized methods implicitly acquires a lock on the instance before the methods are executed. However, a Lock can be acquire explicitly.

            Java provides:

                Lock<interface>, which defines the methods for acquiring and releasing locks.
                    - lock() : void, acquires the lock
                    - unlock() : releases the lock
                    - newCondition() : create Condition object bound to this Lock object, it's used     for communication between threads.

                ReentrantLock, which implements Lock interface. 

            E.g., 
                // created in constructor or as a static object
                Lock lock = new ReentrantLock();

                    ...

                public void update(double d){
                    lock.lock(); // Acquire the lock

                    try{
                        ...
                    }catch(InterruptedException e){

                    }finally{
                        lock.unlock(); // release the lock
                    }
                }

    7. Cooperation Among Threads
        "Conditions on locks can be used to coordinate thread interactions." (p.1115) Condition can be used to faciliate the comminucation between threads. With Condition, threads can specify what to do under the certain conditions. Conditions are objects created by Lock object's newCondition() method. The Condition objects created are associated with the Lock object. 

            The methods provided by Condition object include:
                - await() : void, cause current thread to wait until condition is signaled.
                - signal() : void, wakes up one waiting thread.
                - signalAll() : void, wakes up all waiting thread.

        For more details see ThreadCooperation.java

        It should be noticed that Condition should be waiting in a loop (e.g., while loop) as mentioned in API documentation that: 
        
            "a Condition should always be waited upon in a loop, testing the state predicate that is being waited for. An implementation is free to remove the possibility of spurious wakeups but it is recommended that applications programmers always assume that they can occur and so always wait in a loop."

        More on: <https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/Condition.html>

        Importantly, once a Condition is waiting for signal, it will only run when it receives signal. When no other signal being sent to awake this thread, this thread will wait forever.

    8. Blocking Queues
        Blocking Queues are special kind of queue that applies the similar logic as how Condition is used. Java Collections Framework provides ArrayBlockingQueue, LinkedBlockingQueue, and PriorityBlockingQueue for supporting blocking queues.

            Collections<interface> <- Queue<interface> <- BlockingQueue<interface>

        In BlockingQueue, the put and take methods are synchronized, and they waits for signal when there is no space to put new element or there is no element to take from the queue.

            There are three concrete implementation of BlockingQueue interface:
                - java.util.concurrent.ArrayBlockingQueue
                - java.util.concurrent.LinkedBlockingQueue
                - java.util.concurrent.PriorityBlockingQueue

        For ArrayBlockingQueue, the capacity or optional firness must be speicify to construct it. For fairness, it is a policy that ensures that the threads are served in FIFO order. This is specified in ReentrantLock's constructor and the implementation of BlockingQueue:
            
            e.g.,
                ReentrantLock(fair: boolean)

                ArrayBlockingQueue(capacity: int, fair: boolean)

        More on What actually is Fairness: <https://stackoverflow.com/questions/44964979/what-is-fairness-in-multi-threading-programming>

        For LinkedBlockingQueue, the BlockingQueue is implmeneted using LinkedList, it can be bounded (if capacity is specified) or unbounded.

        For PriorityBlockingQueue, it is implemented using PriorityQueue, which can also be bounded or unbounded (if capacity is specified).

    9. Semaphores
        Semaphore is used to restrict the number of threads accessing a shared resource. To access the shared resource, a thread must gain permit from the semaphore, and it returns the permit back to semaphore when it finishes.
            
            // Semaphore with 1 permimts
            Semaphore semaphore = new Semaphore(1);

            semaphore.acquire();
            semaphore.release();
        
        One possible usage of Semaphore is that limiting number of simultaneous access of one user, which may say have multiple devices, and each device uses one thread. 

            More on: <https://crunchify.com/what-is-java-semaphore-and-mutex-java-concurrency-multithread-explained-with-example/>

        


         

        