Chapter 28 Graphs and Applications:
    1. Introduction:
        "The study of graph problems is known as graph theory" (p.1016) The theory and terminologies were first coined by Leonhard Euler to solve the "Seven Bridges of Konigsberg Problem".

    2. Basic Graph Terminologies:
        "A graph consists of vertices, and edges that connect the vertices." (p.1016)

            [Graph Model] - A graph model is produced that abstractly describe the problems (e.g., for  a map).

            [Vertex/ Node] - A node or vertex is graphically represented using a dot on the graph   model. 

            [Edge] - An edge is a line between the node or vertex.

        2.1 What is a graph?
            "A graph is a mathematical structure that represents relationships among entities in the real world." (p.1016)

            E.g., a graph is defined as G = (V, E), where V represents a set of vertices/nodes, and E represents a set of edges.

                Examples of Verticies/nodes:    
                    V = {"Seattle", "San Francisco", "Los Angeles", "Denver", "Kansas City", "Chicago", "Boston", "New York", "Atlanta", "Miami", "Dallas", "Houston"};                
                Examples of Edges:
                    E = {{"Seattle", "San Francisco"},{"Seattle", "Chicago"}, {"Seattle", "Denver"}, {"San Francisco", "Denver"}, ... };

        2.2 Directed or Undirected Graph:
            A graph can be directed or undirected.
                - "In a directed graph, each edge has a direction, which indicates that you can move from one vertex to the other through the edge." (p.1017)
                - "In an undirected graph, you can move in both directions between vertices." (p.1017)
            
            A Parent/ Child relationship can be modelled using the directed graph. E.g., A -> B, indicating A is a parent of B.

        2.3 Weighted or Unweighted Graph:
            Edges may be weighted or unweighted. Weight can be assigned to easch edge to indicate such as time, distance, etc.

        2.4 Adjacent Vertices and Incident Edges:
            [Adjacent Vertices] - "Two vertices in a graph are said to be adjacent if they are connected by the same edge." (p.1018)

            [Adjacent Edges] - "Two edges are said to be adjacent if they are connected to the same vertex." (p.1018)

            [Incident Edges] - "An edge in a graph that joins two vertices is said to be incident to both vertices."(p.1018)    

            [Degree of A Vertex] - "The degree of a vertex is the number of edges incident to it." (p.1018)

            [Neighbors] - Two vertices or two edges that are adjacent to each other are called neightbors.

            [Loop] - "A loop is an edge that links a vertex to itself." (p.1018)

            [Parallel Edges] - Two or more edges that connects the same two vertices are called parallel edges.

            [Simple Graph] - A simple graph is the one that doesn't have any parallel edges and loops.

            [Complete Graph] - A complete graph is the one wherein "...every two pairs of vertices are connected." (p.1018)

            [Connected/ Disconnected Graph] - "A graph is connected if there exists a path between any two vertices in the graph." (p.1018) I.e., there is a path (consists of a number of edges) from one vertex to any vertex.

            [Subgraph] - A subgraph of a graph(G), is a graph whose vertex set or edge set is a subset of that of the graph G. 

            [Cycle] - "Assume that the graph is connected and undirected. A cycle is a closed path that starts from a vertex and ends at the same vertex."(p.1018)

            [Tree] - If a connected graph that doesn't cycles, it is a tree.

            [Spanning Tree] - A spanning tree is a connected subgraph of a graph(G) that contains all the vertices, and is a tree with minimum edges that connect every vertices.

    3. Representing Graphs

        3.1 Representing Vertices - Vertex Object
            Vertices can be represented by creating class, e.g., City in a graph for city map. The vertices can be labeled using index if the graph is an array. E.g., vertices[0], vertices[1]... and so on.

        3.2 Representing Edges - Edge Array
            Edges of a graph can be represented using a two-dimentional array. E.g.,

                int[][] edges = { 
                    {0, 1}, {0, 3}, {0, 5}, 
                    {1, 0}, {1, 2}, {1, 3},
                    {2, 1}, {2, 3}, {2, 4}, {2, 10}, 
                    {3, 0}, {3, 1}, {3, 2}, {3, 4}, {3, 5}, 
                    {4, 2}, {4, 3}, {4, 5}, {4, 7}, {4, 8}, {4, 10}, 
                    {5, 0}, {5, 3}, {5, 4}, {5, 6}, {5, 7},
                    {6, 5}, {6, 7}, 
                    {7, 4}, {7, 5}, {7, 6}, {7, 8},
                    {8, 4}, {8, 7}, {8, 9}, {8, 10}, {8, 11}, 
                    {9, 8}, {9, 11}, 
                    {10, 2}, {10, 4}, {10, 8}, {10, 11}, 
                    {11, 8}, {11, 9}, {11, 10} };

                where the number in the two-dimentional array refers to the index of the vertices. E.g., Vertex[] vertices = ...

            More specifically, the edge array of a list of vertices is as follows:
                String[] names = {"Peter", "Jane", "Mark", "Cindy", "Wendy"}; 
                int[][] edges = {{0, 2}, {1, 2}, {2, 4}, {3, 4}};

        3.3 Representing Edges - Edge Object
            One way to represent edges without using edge array is to create a class for the edge, treating it as an object.

        3.4 Representing Edges - Adjacency Matrices
            Assuming that the graph has n vertices, the edges can be represented using a two-dimentioanl n * n matrix (Adjacency Matrix). Adjacency Matrices and Adjacency Lists are efficient for processing graphs.

            In the Adjacency Matrices, the value of each element is either 0 or 1, where 0 indicates that the vertex i has no incident edge to vertex j, and 1 indicates that there is an edge between the vertex i and j.

            E.g., adjacencyMatrix[i][j], i and j are the indices representing the vertex, and the value of them (0 or 1) indicating that whether the correspondent vertices i and j has connected edge between them.

            int[][] adjacencyMatrix = {
                {0,1,0,1,0,1,0,0,0,0,0,},
                {0,0,0,0,0,1,1,1,0,1,0,},
                ...
            };



    

                









        


