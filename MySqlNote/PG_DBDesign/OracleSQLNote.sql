/* ORACLE SQL REVIEW */

-- SELECT [columnName] FROM [tableName];
SELECT * FROM HR_REGIONS;

-- Select distinct/unique rows: SELECT DISTINCT [columnName] FROM [tableName];
SELECT DISTINCT LOCATION_ID FROM HR_DEPARTMENTS;

-- Sorting results: ORDER BY [columnName] ASC/DESC
SELECT DISTINCT LOCATION_ID 
FROM HR_DEPARTMENTS
ORDER BY LOCATION_ID ASC;

-- DESCRIBE [tableName];
DESCRIBE HR_COUNTRIES;

-- "IS NOT NULL" as a command, refers to the value of this column is not null.
SELECT * FROM HR_JOBS
WHERE JOB_TITLE IS NOT NULL;

-- ALTER TABLE [tableName] ADD CONSTRAINT [constraintName] PRIMARY KEY ([columnName]);
ALTER TABLE TEST_TABLE ADD CONSTRAINT PK PRIMARY KEY (ID);

-- ALTER TABLE [tableName] ADD CONSTRAINT [constraintName] FOREIGN KEY ([columnName1]) REFERENCES ([columnName2]);
ALTER TABLE TEST_TABLE ADD CONSTRAINT FK FOREIGN KEY (GALLERY_NO) REFERENCES TEST_GALLERY (GALLERY_ID);

-- DISALLOW DELETE/ ON DELETE CASCADE/ ON DELETE SET NULL/ 
ALTER TABLE TEST_TABLE ADD CONSTRAINT FK FOREIGN KEY (GALLERY_NO) REFERENCES TEST_GALLERY (GALLERY_ID) ON DELETE SET NULL;

-- GENERATED BY DEFAULT ON NULL AS IDENTITY
ALTER TABLE TEST_TABLE ADD TEST_AUTO NUMBER(6,0) GENERATED BY DEFAULT ON NULL AS IDENTITY;

-- INSERT INTO [tableName] ([columnName]) VALUES ([values]);
INSERT INTO TEST_TABLE (BBB) VALUES (1);

-- CREATE TABLE [tableName] (...);
CREATE TABLE TEST_TABLE
(
...
);

-- NUMBER( N,N )
CREATE TABLE TEST_TABLE
(
	ID NUMBER(10,0)
);

-- VARCHAR2(N)
CREATE TABLE TEST_TABLE
(
	NAME VARCHAR(10)
);

-- DATE
CREATE TABLE TEST_TABLE
(
	ENTER_DATE DATE
);

-- NOT NULL
CREATE TABLE TEST_TABLE
(
	ID NUMBER(10,0),
	NAME VARCHAR(10) NOT NULL,
	....
)

-- Constraints in tables
CREATE TABLE TEST_TABLE
(
	ID NUMBER(10,0),
	EMP_ID NUMBER(10,0),
	CONSTRAINT TEST_PK PRIMARY KEY (ID),
	CONSTRAINT TEST_FK FOREIGN KEY (EMP_ID) REFERENCES HR_EMPLOYEES (EMPLOYEE_ID)
)

-- Drop one constraint: ALTER TABLE [tableName] DROP CONSTRAINT [constraintName];
ALTER TABLE TEST_TABLE DROP CONSTRAINT FK;

-- Drop table including constraints: DROP TABLE [tableName] CASCADE CONSTRAINT;
DROP TABLE TEST_TABLE CASCADE CONSTRAINT;

-- Check constraint: ... CHECK([columnName] [comparator] [value])
ALTER TABLE TEST_TABLE ADD CONSTRAINT CK CHECK(NO > 0);  /*("NO" is a column in this table.)*/

-- Comparator: >, <, >=, <=, =
NO >= 0
year > 2019 /* after 2019*/

-- Comparator: IN([value1], [value2], [value3])
IN(5, 10, 11)
IN('YES', 'NO', 'OOPS');
ALTER TABLE TEST_TABLE ADD CONSTRAINT NN CHECK(NAME IN ('JOHN', 'PIGGY')); 

-- LENGTH([columnName]) >, <, >=, <=, = [value].
ALTER TABLE TEST_TABLE ADD CONSTRAINT LENGTHY CHECK(LENGTH(NAME) > 10);  /* "NAME" is a column in this table*/

-- BETWEEN [value] AND [value]
ALTER TABLE TEST_TABLE ADD CONSTRAINT BET CHECK(NO BETWEEN 0 AND 100);

-- Conditional statement for text: LIKE '[string]' (Always use UPPER() to search text.)
SELECT * FROM HR_EMPLOYEES WHERE FIRST_NAME LIKE 'A%'; /* % refers to string of any length*/
SELECT * FROM HR_EMPLOYEES WHERE FIRST_NAME LIKE 'A_'; /* _ refers to one character*/

-- Multiple conditions: AND / OR
SELECT * FROM HR_EMPLOYEES 
WHERE FIRST_NAME LIKE 'A%'
AND SALARY > 9000
OR SALARY = 9000;

SELECT * FROM HR_EMPLOYEES 
WHERE FIRST_NAME LIKE 'A%'
OR SALARY > 9000;

-- COMMIT / ROLLBACK 

-- Joining the table (Most important): SELECT * FROM [table1], [table2] WHERE [table1.primaryKey] = [table2.foreignKey];
SELECT EMPLOYEE_ID, DEPT.DEPARTMENT_NAME FROM HR_EMPLOYEES EMP, HR_DEPARTMENTS DEPT
WHERE EMP.DEPARTMENT_ID = DEPT.DEPARTMENT_ID
AND DEPARTMENT_NAME = 'IT';

-- View: CREATE VIEW [viewName] AS [query];
CREATE VIEW view_example AS 
(
SELECT EMPLOYEE_ID FROM HR_EMPLOYEES
);

-- View: CREATE OR REPLACE VIEW [viewName] AS [newQuery];
CREATE OR REPLACE VIEW view_example AS 
(
SELECT LAST_NAME FROM HR_EMPLOYEES
);

-- View: DROP VIEW [viewName];
DROP VIEW view_example;

-- Using view: SELECT * FROM [viewName];
SELECT * FROM view_example;

-- Aliase for table: [tableName] [aliase]
SELECT E.LAST_NAME FROM HR_EMPLOYEES E;

-- Aliase for column: [columnName] AS [aliase]
SELECT E.LAST_NAME AS OOPS FROM HR_EMPLOYEES E;
SELECT E.LAST_NAME AS "OOPS OOPS" FROM HR_EMPLOYEES E;

-- Numeric operations: AVG([columnName]) / MAX([columnName]) / MIN([columnName]) / SUM([columnName]) / COUNT([columnName])
SELECT AVG(SALARY) FROM HR_EMPLOYEES;

-- For counting rows only, always use *
SELECT COUNT(*) FROM HR_EMPLOYEES
WHERE SALARY > 9000;

-- UPPER([columnName]) / LOWER([columnName])
SELECT * FROM HR_EMPLOYEES
WHERE UPPER(LAST_NAME) LIKE "A%";

-- CONCAT([text1], [text2]) / '||'
'ABC' || 'DDD' || 'EFF'
SELECT CONCAT('ABC', 'DEF');

-- Extract value from DATE dataType; EXTRACT([YEAR/MONTH/DAY/HOUR/MINUTE/SECOND] FROM [columnName])
SELECT EXTRACT(YEAR FROM HIRE_DATE) FROM HR_EMPLOYEES;

-- Group by + Having: GROUP BY [columnName] HAVING [condition]
SELECT HR_JOBS,JOB_TITLE, COUNT(DISTINCT HR_EMPLOYEES.LAST_NAME) 
FROM HR_JOBS, HR_EMPLOYEES,
WHERE HR_JOBS.JOB_ID = HR_EMPLOYEES.JOB_ID
GROUP BY HR_JOBS.JOB_TITLE,
HAVING AVG(HR_EMPLOYEES.SALARY) > 1000;

-- FETCH FIRST [number] ROWS ONLY
SELECT * FROM TEST_TABLE
FETCH FIRST 10 ROWS ONLY;

/* Additional Command*/

-- CONSTRAINT TYPE: 'P' refers to primary key, 'R' refers to foreign key.
SELECT * FROM USER_CONSTRAINTS
WHERE CONSTRAINT_TYPE = 'R';

SELECT * FROM USER_CONSTRAINTS
WHERE CONSTRAINT_TYPE = 'P';

-- Add column: ALTER TABLE [tableName] ADD [columnName] [dataType]; 
ALTER TABLE TEST_TABLE ADD GALLERY_NO NUMBER(6,0);

-- Drop column: ALTER TABLE [tableName] DROP COLUMN [columnName];
ALTER TABLE TEST_TABLE DROP COLUMN TABLE_ID;

-- Rename table: ALTER TABLE [tableName] RENAME TO [newTableName];
ALTER TABLE TEST_TABLE RENAME TO TEST_NEW_NAME;

-- Rename column: ALTER TABLE [tableName] RENAME COLUMNE [columnName] TO [newColumnName];
ALTER TABLE TEST_TABLE RENAME COLUMN EMP_ID TO EMP_NO;

-- "USER_TABLES" as a special table for tables
SELECT * FROM USER_TABLES;

-- "ALL_TAB_COLUMNS" as a special table for columns
SELECT * FROM ALL_TAB_COLUMNS;

-- "USER_VIEWS" as a special table for views
SELECT * FROM USER_VIEWS;

-- "USER_CONSTRAINTS" as a special table for constraints
SELECT * FROM USER_CONSTRAINTS;





